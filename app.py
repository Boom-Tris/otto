import streamlit as st
import pandas as pd
import joblib
import lightgbm as lgb
from collections import Counter
import numpy as np
import os

# --- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ session ---
EVENT_COUNT = 5

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö universal ---
def load_model(path):
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• LightGBM ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô sklearn wrapper (LGBMRanker) ‡πÉ‡∏ä‡πâ joblib.load()
    - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô native Booster ‡πÉ‡∏ä‡πâ lgb.Booster(model_file)
    """
    try:
        model = joblib.load(path)
        if hasattr(model, "predict"):
            print(f"‚úÖ Loaded sklearn model: {path}")
            return model
        else:
            raise TypeError("Not sklearn model")
    except Exception:
        print(f"‚öôÔ∏è Loading as Booster model: {path}")
        return lgb.Booster(model_file=path)

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ï‡∏±‡∏ß ---
models = {
    "clicks": load_model("models/lgbm_ranker_clicks.pkl"),
    "carts": load_model("models/lgbm_ranker_carts.pkl"),
    "orders": load_model("models/lgbm_ranker_orders.pkl")
}

# --- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• global popularity ---
global_popularity_counter = joblib.load("global_popularity_counter.joblib")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
def run_model(session):
    results = {}
    events = session["events"]

    for event_type in ["clicks", "carts", "orders"]:
        model = models[event_type]

        session_length = len(events)
        history_aids_counter = Counter([e["aid"] for e in events])

        X_data = []

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á feature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ event ---
        for event in events:
            aid_str = event["aid"]
            aid_int = int(aid_str)

            features = [
                global_popularity_counter.get(aid_int, 0),  # global popularity
                session_length,                              # session length
                history_aids_counter.get(aid_str, 0)         # frequency ‡∏Ç‡∏≠‡∏á aid ‡πÉ‡∏ô session
            ]
            X_data.append(features)

        # --- ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ---
        X_df = pd.DataFrame(X_data, columns=[
            "global_popularity",
            "session_length",
            "aid_frequency"
        ])

        st.subheader(f"üß© Input features for {event_type}")
        st.write(X_df.head())

        # --- ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ---
        try:
            if isinstance(model, lgb.Booster):
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö native Booster ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á numpy array
                preds = model.predict(X_df.values, num_iteration=model.best_iteration)
            else:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sklearn wrapper ‡πÉ‡∏ä‡πâ DataFrame ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡πÜ
                preds = model.predict(X_df)

            results[event_type] = preds.tolist()
        except Exception as e:
            st.error(f"Error predicting {event_type}: {e}")
            results[event_type] = []

    return results


# --- ‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ç‡∏≠‡∏á Streamlit ---
if __name__ == "__main__":
    samples = pd.read_json(path_or_buf="test_trimmed.jsonl", lines=True)

    st.title("üß† OTTO: Multi-Objective Recommender System")

    with st.container():
        sample = st.selectbox("Choose Sample No.", samples.index)
        selected_sample = samples.iloc[sample]

    with st.container(border=True, height=320):
        st.write(f"**Session ID:** `{selected_sample['session']}`")
        st.write("**Events:**")
        st.write(selected_sample["events"])

    with st.container():
        if st.button("üöÄ Run Model", type="primary", use_container_width=True):
            st.divider()
            result = run_model(selected_sample)
            st.subheader("üîÆ Prediction Results")
            st.write(result)
